{"version":3,"sources":["components/ActionsBar/VolunteerButton/VolunteerButton.tsx","components/ActionsBar/ActionsBar.tsx","components/Body/Papers/Paper/Paper.tsx","components/Body/Papers/Papers.tsx","utils/Abbreviations.ts","components/Body/Stats/Stats.tsx","components/Body/Books/Book/Book.tsx","components/Body/Books/Books.tsx","components/Body/Body.tsx","components/Footer/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["VolunteerButton","location","searchTerm","onClick","window","open","toLowerCase","ActionsBar","Paper","id","Papers","useState","papers","setPapers","useEffect","url","fetch","then","res","json","esearchresult","idlist","map","index","key","stateNums","Stats","disease","state","year","population","setPopulation","process","REACT_APP_CENSUS_API_KEY","Book","book","creators","title","publicationName","publicationDate","join","Books","books","setBooks","REACT_APP_SPRINGER_API_KEY","records","diseases","years","Body","selectedState","setSelectedState","selectedDisease","setSelectedDisease","selectedYear","setSelectedYear","className","USA","isLocationSelected","onLocationClick","input","target","onChange","value","Footer","App","Boolean","hostname","match","dotenv","config","console","log","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d8e69e87.chunk.js","sourcesContent":["import React from 'react';\n\nexport interface VolunteerButtonProps {\n  searchTerm: string;\n  location: string;\n}\n\nconst VolunteerButton: React.FC<VolunteerButtonProps> = ({ location, searchTerm }) => {\n  const onClick = () => {\n    window.open(`https://www.volunteermatch.org/search/?l=${location}%2C+USA&k=${searchTerm.toLowerCase()}&searchOpps=`, \"_blank\");\n    window.open(`https://createthegood.aarp.org/volunteer-search.html?keywords=${searchTerm.toLowerCase()}&search_radius=25&showup_page=0&anytime=on`, \"_blank\");\n  }\n  return <button onClick={onClick}>Volunteer!</button>\n};\n\nexport default VolunteerButton;\n","import React from 'react';\n\nimport VolunteerButton from './VolunteerButton';\n\nimport './ActionsBar.css';\n\nconst ActionsBar: React.FC = () => (\n  <header>\n    <div>\n      <h1>MedMap</h1>\n      <VolunteerButton location={'fl'} searchTerm={'cancer'} />\n    </div>\n  </header>\n);\n\nexport default ActionsBar;","import React from 'react';\n\nexport interface PaperProps {\n  id: string;\n}\n\nconst Paper: React.FC<PaperProps> = ({ id }) => {\n  const onClick = () => window.open(`http://www.ncbi.nlm.nih.gov/pmc/articles/PMC${id}`);\n\n  return <p onClick={onClick}>{id}</p>\n};\n\nexport default Paper;\n","import React, { useEffect, useState } from 'react';\n\nimport Paper from './Paper';\n\nexport interface PapersProps {\n  searchTerm: string;\n}\n\nconst Papers: React.FC<PapersProps> = ({ searchTerm }) => {\n  const [papers, setPapers] = useState([]);\n\n  useEffect(() => {\n    const url = `https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=pmc&term=${searchTerm}+AND+free+fulltext[filter]&retmode=json`;\n    fetch(url).then(res => res.json()).then(res => setPapers(res.esearchresult.idlist));\n  }, [searchTerm, papers]);\n\n  if (papers) {\n    return (\n      <>\n        <h3>Papers</h3>\n        {papers.map((id: string, index: number) => <Paper key={index} id={id} />)}\n      </>\n    );\n  }\n  return  null;\n};\n\nexport default Papers;\n","export const stateNums: { [key: string]: number } = {\n  \"al\": 1,\n  \"ak\": 2,\n  \"ar\": 5,\n  \"az\": 4,\n  \"ca\": 6,\n  \"co\": 8,\n  \"ct\": 9,\n  \"dc\": 11,\n  \"de\": 10,\n  \"fl\": 12,\n  \"ga\": 13,\n  \"hi\": 15,\n  \"ia\": 19,\n  \"id\": 16,\n  \"il\": 17,\n  \"in\": 18,\n  \"ks\": 20,\n  \"ky\": 21,\n  \"la\": 22,\n  \"ma\": 25,\n  \"md\": 24,\n  \"me\": 23,\n  \"mi\": 26,\n  \"mn\": 27,\n  \"mo\": 29,\n  \"ms\": 28,\n  \"mt\": 30,\n  \"nc\": 37,\n  \"nd\": 38,\n  \"ne\": 31,\n  \"nh\": 33,\n  \"nj\": 34,\n  \"nm\": 35,\n  \"nv\": 32,\n  \"ny\": 36,\n  \"oh\": 39,\n  \"ok\": 40,\n  \"or\": 41,\n  \"pa\": 42,\n  \"ri\": 44,\n  \"sc\": 45,\n  \"sd\": 46,\n  \"tn\": 47,\n  \"tx\": 48,\n  \"ut\": 49,\n  \"va\": 51,\n  \"vt\": 50,\n  \"wa\": 53,\n  \"wi\": 55,\n  \"wv\": 54,\n  \"wy\": 56\n};\n\nexport const stateNames: { [key: string]: string } = {\n  \"ak\": \"Alaska\",\n  \"al\": \"Alabama\",\n  \"ar\": \"Arkansas\",\n  \"az\": \"Arizona\",\n  \"ca\": \"California\",\n  \"co\": \"Colorado\",\n  \"ct\": \"Conneticut\",\n  \"dc\": \"District of Columbia\",\n  \"de\": \"Delaware\",\n  \"fl\": \"Florida\",\n  \"ga\": \"Georgia\",\n  \"hi\": \"Hawaii\",\n  \"ia\": \"Iowa\",\n  \"id\": \"Idaho\",\n  \"il\": \"Illinois\",\n  \"in\": \"Indiana\",\n  \"ks\": \"Kansas\",\n  \"ky\": \"Kentucky\",\n  \"la\": \"Louisiana\",\n  \"ma\": \"Massachusetts\",\n  \"md\": \"Maryland\",\n  \"me\": \"Maine\",\n  \"mi\": \"Michigan\",\n  \"mn\": \"Minnesota\",\n  \"mo\": \"Missouri\",\n  \"ms\": \"Mississipi\",\n  \"mt\": \"Montana\",\n  \"nc\": \"North Carolina\",\n  \"nd\": \"North Dakota\",\n  \"ne\": \"Nebraska\",\n  \"nh\": \"New Hampshire\",\n  \"nj\": \"New Jersey\",\n  \"nm\": \"New Mexico\",\n  \"nv\": \"Nevada\",\n  \"ny\": \"New York\",\n  \"oh\": \"Ohio\",\n  \"ok\": \"Oklahoma\",\n  \"or\": \"Oregon\",\n  \"pa\": \"Pensylvania\",\n  \"ri\": \"Rhode Island\",\n  \"sc\": \"South Carolina\",\n  \"sd\": \"South Dakota\",\n  \"tn\": \"Tennesee\",\n  \"tx\": \"Texas\",\n  \"ut\": \"Utah\",\n  \"va\": \"Virginia\",\n  \"vt\": \"Vermont\",\n  \"wa\": \"Washington\",\n  \"wi\": \"Wisconsin\",\n  \"wv\": \"West Virginia\",\n  \"wy\": \"Wyoming\",\n};\n\nexport const reverseNames = {\n  \"Alaska\": \"ak\",\n  \"Alabama\": \"al\",\n  \"Arkansas\": \"ar\",\n  \"Arizona\": \"az\",\n  \"California\": \"ca\",\n  \"Colorado\": \"co\",\n  \"Conneticut\": \"ct\",\n  \"District of Columbia\": \"dc\",\n  \"Delaware\": \"dc\",\n  \"Florida\": \"fl\",\n  \"Georgia\": \"ga\",\n  \"Hawaii\": \"hi\",\n  \"Iowa\": \"ia\",\n  \"Idaho\": \"id\",\n  \"Illinois\": \"il\",\n  \"Indiana\": \"in\",\n  \"Kansas\": \"ks\",\n  \"Kentucky\": \"ky\",\n  \"Louisiana\": \"la\",\n  \"Massachusetts\": \"ma\",\n  \"Maryland\": \"md\",\n  \"Maine\": \"me\",\n  \"Michigan\": \"mi\",\n  \"Minnesota\": \"mn\",\n  \"Missouri\": \"mo\",\n  \"Mississipi\": \"ms\",\n  \"Montana\": \"mt\",\n  \"North Carolina\": \"nc\",\n  \"North Dakota\": \"nd\",\n  \"Nebraska\": \"ne\",\n  \"New Hampshire\": \"nh\",\n  \"New Jersey\": \"nj\",\n  \"New Mexico\": \"m\",\n  \"Nevada\": \"nv\",\n  \"New York\": \"ny\",\n  \"Ohio\": \"oh\",\n  \"Oklahoma\": \"ok\",\n  \"Oregon\": \"or\",\n  \"Pensylvania\": \"pa\",\n  \"Rhode Island\": \"ri\",\n  \"South Carolina\": \"sc\",\n  \"South Dakota\": \"sd\",\n  \"Tennesee\": \"tn\",\n  \"Texas\": \"tx\",\n  \"Utah\": \"ut\",\n  \"Virginia\": \"va\",\n  \"Vermont\": \"vt\",\n  \"Washington\": \"wa\",\n  \"Wisconsin\": \"wi\",\n  \"West Virginia\": \"wv\",\n  \"Wyoming\": \"wy\"\n};\n","import React, { useEffect, useState } from 'react';\n\nimport { stateNums } from '../../../utils/Abbreviations';\n\nexport interface StatsProps {\n  disease: string;\n  state?: string;\n  year: string;\n}\n\nconst Stats: React.FC<StatsProps> = ({ disease, state, year }) => {\n  const [population, setPopulation] = useState<number>(0);\n\n  useEffect(() => {\n    if (!state) {\n      return;\n    }\n    const url = `http://api.census.gov/data/2010/sf1?key=${process.env.REACT_APP_CENSUS_API_KEY}&get=P0010001,P0080003,P0010001,P0080006,NAME&for=state:${stateNums[state]}`;\n    fetch(url).then(res => res.json()).then(res => setPopulation(res[1][0]));\n    setPopulation(100);\n  }, [disease, state, year]);\n\n  return <p>{`Populaion: ${population}`}</p>;\n};\n\nexport default Stats;\n","import React from 'react';\n\nimport { Book as BookType } from '../Books';\n\nexport interface BookProps {\n  book: BookType;\n}\n\nconst Book: React.FC<BookProps> = ({ book: { creators, title, publicationName, publicationDate }}) => {\n  return <p>{`${title} ${creators.join(', ')} ${publicationName} ${publicationDate}`}</p>\n};\n\nexport default Book;\n","import React, { useEffect, useState } from 'react';\n\nimport Book from './Book';\n\nexport interface BooksProps {\n  searchTerm: string;\n}\n\n// TODO creators is not actually a list of strings, it is a list of objects\nexport interface Book {\n  creators: string[];\n  title: string;\n  publicationName: string;\n  publicationDate: string;\n}\n\nconst Books: React.FC<BooksProps> = ({ searchTerm }) => {\n  const [books, setBooks] = useState<Book[]>();\n\n  useEffect(() => {\n    const url = `http://api.springer.com/metadata/json?q=keyword:${searchTerm}&api_key=${process.env.REACT_APP_SPRINGER_API_KEY}`;\n    fetch(url).then(res => res.json()).then(res => setBooks(res.records.map(({ creators, title, publicationName, publicationDate }: any) => ({ creators, title, publicationName, publicationDate }))));\n  }, [searchTerm]);\n\n  if (books) {\n    return (\n      <>\n        <h3>Books</h3>\n        {books.map((book, index: number) => <Book key={index} book={book} />)}\n      </>\n    );\n  }\n  return  null;\n};\n\nexport default Books;\n","import React, { useState } from 'react';\nimport { SVGMap } from 'react-svg-map';\nimport USA from '@svg-maps/usa';\n\nimport Papers from './Papers';\nimport Stats from './Stats';\nimport Books from './Books';\n\nimport './Body.css';\nimport 'react-svg-map/lib/index.css';\n\nconst diseases = ['--', 'Diabetes', 'Cancer', 'Flu'];\nconst years = ['2014', '2015', '2016', '2017', '2018', '2019'];\n\nconst Body: React.FC = () => {\n  const [selectedState, setSelectedState] = useState<string | undefined>();\n  const [selectedDisease, setSelectedDisease] = useState<string>('--');\n  const [selectedYear, setSelectedYear] = useState<string>('2014');\n\n  const onLocationClick = (input: any) => setSelectedState(input.target.id);\n  const isLocationSelected = ({ id }: { id: string }) => id === selectedState;\n  const onDiseaseChange = ({ target }: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedDisease(target.value);\n  };\n  const onYearChange = ({ target }: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedYear(target.value);\n  };\n\n  return (\n    <>\n      <h3>{selectedState}</h3>\n      <div>\n        <SVGMap className={'map'} map={USA} isLocationSelected={isLocationSelected} onLocationClick={onLocationClick} />\n        <Stats disease={selectedDisease} state={selectedState} year={selectedYear} />\n        <select onChange={onDiseaseChange}>\n          {diseases.map((disease, index) => <option key={index} value={disease}>{disease}</option>)}\n        </select>\n        <select onChange={onYearChange}>\n          {years.map((year, index) => <option key={index} value={year}>{year}</option>)}\n        </select>\n        <Papers searchTerm={selectedDisease} />\n        <Books searchTerm={selectedDisease} />\n      </div>\n    </>\n  );\n};\n\nexport default Body;\n\n/*\n  function calc() {\n    var newer = [];\n    for (var x in stateNums) {\n      newer.push(stateNums[x]);\n    }\n\n    newer.sort();\n\n    var index = 1;\n    for (var x in stateNums) {\n      for (var y = 1; y < 57; y++) {\n        if (stateNums[x] == y) {\n          $(\"#\" + x).css(\n            \"fill\",\n            \"rgb(\" +\n              parseInt(255 * (index / 51)) +\n              \",\" +\n              parseInt(255 * (index / 51)) +\n              \",\" +\n              parseInt(255 * (index / 51)) +\n              \")\"\n          );\n          index++;\n        }\n      }\n    }\n  }\n\n\n  function cdcCall(year) {\n    if (window.XMLHttpRequest) {\n      // code for IE7+, Firefox, Chrome, Opera, Safari\n      xmlhttp = new XMLHttpRequest();\n    } else {\n      // code for IE6, IE5\n      xmlhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n    }\n\n    //xmlhttp.onreadystatechange=function() {\n    // \tif (xmlhttp.readyState==4 && xmlhttp.status==200) {\n    //\t\txmlDoc=xmlhttp.responseXML;\n\n    //var list = xmlDoc.getElementsByTagName(\"r\");\n    //\t\tconsole.log(\"here \" + xmlDoc.getElementsByTagName(\"r\").childNodes[0].nodeValue);\n    //\t}\n    //\t}\n\n    xmlhttp.open(\"GET\", \"D100-resp.xml\", false);\n    xmlhttp.send();\n    xmlDoc = xmlhttp.responseXML;\n\n    var list = xmlDoc.getElementsByTagName(\"c\");\n    var parents = [];\n    for (var x = 0; x < list.length; x++) {\n      if (list[x].getAttribute(\"l\") == year) {\n        parents.push(list[x].parentNode);\n      }\n    }\n\n    for (var y = 0; y < parents.length; y++) {\n      list = parents[y].getElementsByTagName(\"c\");\n      for (var w = 0; w < list.length; w++) {\n        if (list[w].getAttribute(\"l\") == stateNames[dataHold.name]) {\n          return parseFloat(\n            parents[y].childNodes[4].getAttribute(\"v\") / 1000\n          ).toFixed(2);\n        }\n      }\n    }\n  }\n\n  function cdcNationCall(year) {\n    if (window.XMLHttpRequest) {\n      // code for IE7+, Firefox, Chrome, Opera, Safari\n      xmlhttp = new XMLHttpRequest();\n    } else {\n      // code for IE6, IE5\n      xmlhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n    }\n\n    xmlhttp.open(\"GET\", \"D100-resp.xml\", false);\n    xmlhttp.send();\n    xmlDoc = xmlhttp.responseXML;\n\n    var list = xmlDoc.getElementsByTagName(\"c\");\n    var parents = [];\n    for (var x = 0; x < list.length; x++) {\n      if (list[x].getAttribute(\"l\") == year) {\n        parents.push(list[x].parentNode);\n      }\n    }\n\n    for (var y = 0; y < parents.length; y++) {\n      list = parents[y].getElementsByTagName(\"c\");\n      for (var w = 0; w < list.length; w++) {\n        if (list[w].getAttribute(\"c\") == \"1\") {\n          return parseFloat(\n            parents[y].childNodes[4].getAttribute(\"dt\") / 1000\n          ).toFixed(2);\n        }\n      }\n    }\n  }\n\n  function cdcSpread() {\n    if (window.XMLHttpRequest) {\n      // code for IE7+, Firefox, Chrome, Opera, Safari\n      xmlhttp = new XMLHttpRequest();\n    } else {\n      // code for IE6, IE5\n      xmlhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n    }\n\n    xmlhttp.open(\"GET\", \"D100-resp.xml\", false);\n    xmlhttp.send();\n    xmlDoc = xmlhttp.responseXML;\n\n    var list = xmlDoc.getElementsByTagName(\"c\");\n    var parents = [];\n    var parentals = [];\n    var spread = [];\n    var hold = [];\n    for (var x = 0; x < list.length; x++) {\n      if (list[x].getAttribute(\"l\") == $(\"#year\").val()) {\n        parents.push(list[x].parentNode);\n      }\n    }\n\n    for (var x in stateNames) {\n      for (var y = 0; y < parents.length; y++) {\n        list = parents[y].getElementsByTagName(\"c\");\n        for (var w = 0; w < list.length; w++) {\n          if (list[w].getAttribute(\"l\") == stateNames[x]) {\n            hold[x] = parents[y].childNodes[4].getAttribute(\"v\");\n          }\n        }\n      }\n    }\n\n    var newHold = getSortedKeys(hold);\n\n    var index = 1;\n    for (var x in newHold) {\n      $(\"#\" + newHold[x]).css(\n        \"fill\",\n        \"rgb(\" +\n          parseInt(255 * (index / 51)) +\n          \",\" +\n          parseInt(255 * (index / 51)) +\n          \",\" +\n          parseInt(255 * (index / 51)) +\n          \")\"\n      );\n      index++;\n    }\n  }\n*/\n","import React from 'react';\n\nimport './Footer.css';\n\nconst Footer: React.FC = () => (\n  <div className={'footer'}>\n    <p>Nick Glazer :: 2014-2019</p>\n  </div>\n);\n\nexport default Footer;\n","import React from 'react';\n\nimport ActionsBar from './components/ActionsBar';\nimport Body from './components/Body';\nimport Footer from './components/Footer';\n\nimport './App.css';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <ActionsBar />\n      <Body />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport dotenv from 'dotenv';\n\ndotenv.config();\nconsole.log(process.env);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}